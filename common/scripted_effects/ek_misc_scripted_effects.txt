# Effect run when attempting to become an Occultist as a Witch
witch_become_occultist_effect = {
	remove_trait = witch
	add_trait = occultist
	
	add_piety_level = 1
}

startup_culture_effect = {
	save_culture_in_global_list = { CULTURE = culture:$CULTURE$ }
	culture_key_setup = { CULTURE = $CULTURE$ }
}

culture_key_setup = {
    culture:$CULTURE$ = {
        set_variable = { name = culture_key value = flag:$CULTURE$_ }
    }
}

### Destroy the Empire of Cyrodiil and create the k_heartlands
interregnum_shatter_cyrodiil = {
	### We create the vassal in the Imperial Isles (Imperial Commune)
	create_character = {
		location = title:c_imperial_city.title_province
		template = new_commander_character ### EK TODO: Not that (lol)
		faith = faith:imperial_cult
		culture = culture:heartlander
		save_scope_as = title_recipient
		gender_female_chance = {
			if = {
				limit = { scope:the_faith = { has_doctrine = doctrine_gender_male_dominated } }
				add = 0
			}
			else_if = {
				limit = { scope:the_faith = { has_doctrine = doctrine_gender_female_dominated } }
				add = 100
			}
			else = {
				add = 50
			}
		}
	}
	scope:title_recipient = { ek_character_setup_effect = yes }
	
	# We give them everything we own in k_heartlands (they usurp c_imperial_city if needed)
	title:k_heartlands = { add_to_list = titles_to_give }
	title:d_imperial_isle = { add_to_list = titles_to_give }
	title:c_imperial_city.title_province = { add_to_list = titles_to_give }
	every_held_title = {
		limit = { target_is_de_jure_liege_or_above = title:k_heartlands }
		add_to_list = titles_to_give
	}
	
	every_vassal = {
		limit = { capital_province = { kingdom = title:k_heartlands } }
		add_to_list = vassals_to_give
	}
	
	create_title_and_vassal_change = {
		type = independency
		save_scope_as = change
		add_claim_on_loss = no
	}
	
	every_in_list = {
		list = titles_to_give
		change_title_holder = {
			holder = scope:title_recipient
			change = scope:change
			take_baronies = yes
		}
	}
	
	every_in_list = {
		list = vassals_to_give
		change_liege = {
			liege = scope:title_recipient
			change = scope:change
		}
	}
	
	resolve_title_and_vassal_change = scope:change
	
	# Then they become independent
	create_title_and_vassal_change = {
		type = independency
		save_scope_as = change
		add_claim_on_loss = yes
	}
	scope:title_recipient = {
		becomes_independent = {
			change = scope:change
		}
	}

	resolve_title_and_vassal_change = scope:change
	
	
	## Now we destroy some stuff
	destroy_title = title:e_cyrodiil
	
	primary_title = { save_scope_as = primary_title }
	
	### Vassals become independent
	every_vassal = {
		limit = { NOT = { this.primary_title = { target_is_de_jure_liege_or_above = scope:primary_title } } }
		create_title_and_vassal_change = {
			type = independency
			save_scope_as = change
			add_claim_on_loss = yes
		}
		becomes_independent = {
			change = scope:change
		}

		resolve_title_and_vassal_change = scope:change
	}
	
	### Any county that isn't de Jure under our primary title becomes independent
	every_held_title = {
		limit = {
			NOT = { this = scope:primary_title }
			NOT = { target_is_de_jure_liege_or_above = scope:primary_title }
		}
		add_to_list = titles_to_make_independent
	}
	
	every_in_list = {
		list = titles_to_make_independent
		save_scope_as = current_title
		
		create_character = {
			location = scope:current_title.location
			template = new_commander_character ### EK TODO: Not that (lol)
			faith = scope:current_title.faith
			culture = scope:current_title.culture
			save_scope_as = title_recipient
			gender_female_chance = {
				if = {
					limit = { scope:the_faith = { has_doctrine = doctrine_gender_male_dominated } }
					add = 0
				}
				else_if = {
					limit = { scope:the_faith = { has_doctrine = doctrine_gender_female_dominated } }
					add = 100
				}
				else = {
					add = 50
				}
			}
		}
		scope:title_recipient = { ek_character_setup_effect = yes }
		
		# We give them the title
		create_title_and_vassal_change = {
			type = independency
			save_scope_as = change
			add_claim_on_loss = no
		}

		change_title_holder = {
			holder = scope:title_recipient
			change = scope:change
			take_baronies = yes
		}
		
		# And we make them independent
		scope:title_recipient = {
			becomes_independent = {
				change = scope:change
			}
		}
		
		resolve_title_and_vassal_change = scope:change
	}
	
	custom_tooltip = imperial_commune_creation_tooltip
	custom_tooltip = rest_cyrodiil_indepndent_tooltip
	custom_tooltip = interregnum_starts_tooltip
	
	# We (Cyrodiilic culture group) lose the Lingua Tamrielis innovation
	every_culture_global = {
		limit = {
			culture_group = culture_group:cyrodiilic_group
			has_innovation = innovation_lingua_tamrielis
		}
		remove_innovation = innovation_lingua_tamrielis
	}
}

# Attrebus stuff
attrebus_fulfill_required_task = {
	$ATTREBUS$ = {
		if = {
			limit = { NOT = { has_variable = attrebus_required_tasks_complete } }
			set_variable = {
				name = attrebus_required_tasks_complete
				value = 1
			}
		}
		else = {
			change_variable = {
				name = attrebus_required_tasks_complete
				add = 1
			}
		}
		
		change_variable = {
			name = attrebus_years_pseudo_emperor_left
			add = 5
		}
	}
}
attrebus_fulfill_optional_task = {
	$ATTREBUS$ = {
		if = {
			limit = { NOT = { has_variable = attrebus_optional_tasks_complete } }
			set_variable = {
				name = attrebus_optional_tasks_complete
				value = 1
			}
		}
		else = {
			change_variable = {
				name = attrebus_optional_tasks_complete
				add = 1
			}
		}
	}
}

### To easily apply the effects of the Plunderer perks
calculate_bonus_resources_from_loot = {
	### EK EDIT: Grand Raider - Loot * 1.25
	if = {
		limit = { $RAIDER$ = { has_perk = grand_raider_perk } }
		
		change_variable = {
			name = raid_loot
			multiply = 1.25
		}
	}
	
	### EK EDIT: Loot & Prisoners - Loot / 5
	set_variable = {
		name = bonus_dev
		value = {
			value = var:raid_loot
			divide = 5
		}
	}
	
	### EK EDIT: Raider blood - Loot / 10
	set_variable = {
		name = bonus_renown
		value = {
			value = var:raid_loot
			divide = 10
		}
	}
}

### ! Requires you to use calculate_bonus_resources_from_loot at some point before
get_resources_from_loot = {
	### EK EDIT: Grand Raider - Loot * 1.25
	if = {
		limit = { $RAIDER$ = { has_perk = grand_raider_perk } }
		
		change_variable = {
			name = $LOOT$
			multiply = 1.25
		}
	}
	
	### EK EDIT: Loot & Prisoners - Loot / 5
	set_variable = {
		name = bonus_dev
		value = {
			value = $LOOT$
			divide = 5
		}
	}
	
	### EK EDIT: Raider blood - Loot / 10
	set_variable = {
		name = bonus_renown
		value = {
			value = $LOOT$
			divide = 10
		}
	}
	
	hidden_effect = { add_prestige = $LOOT$ }

	### EK EDIT: Gold is added differently, so we add the smol bonus here directly
	set_variable = {
		name = bonus_resources_gained
		value = {
			value = $LOOT$
			divide = 4
		}
	}
	hidden_effect = { add_gold = var:bonus_resources_gained }
	### EK EDIT: Sacred Raids - Give piety too
	if = { 
		limit = { has_perk = sacred_raids_perk }
		hidden_effect = { add_piety = $LOOT$ }
	}
	### EK EDIT: Raider Blood - Give renown too
	if = {
		limit = { has_perk = raider_blood_perk exists = $RAIDER$.dynasty }
		hidden_effect = { $RAIDER$.dynasty = { add_dynasty_prestige = $RAIDER$.var:bonus_renown } }
	}
}

### Spends the development progress stored in the variable in your counties, giving it in priority to the counties closer to growing
spend_dev_progress_own_counties = {
	set_variable = {
		name = loc_dev_points
		value = $DEV_POINTS$
	}
	
	while = {
		limit = { $DEV_POINTS$ > 0 }
		
		save_scope_value_as = {
			name = dev_points_left
			value = var:loc_dev_points
		}
		
		ordered_county = {
			limit = { this.holder = $OWNER$ }
			order_by = development_towards_level_increase
			
			save_scope_as = checked_county
			
			### We check how much dev points would have to be given for the county to get an additional dev 
			set_variable = {
				name = dev_needed
				value = 100
			}
			
			change_variable = {
				name = dev_needed
				subtract = scope:checked_county.development_towards_level_increase
			}
			
			save_scope_value_as = {
				name = dev_needed
				value = var:dev_needed
			}
			
			### Can we give that, or will the county have the settle with less?
			if = {
				limit = { scope:dev_points_left = { compare_value >= scope:dev_needed } }
				save_scope_value_as = {
					name = dev_given
					value = scope:dev_needed
				}
			}
			
			else = {
				save_scope_value_as = {
					name = dev_given
					value = scope:dev_points_left
				}
			}
			
			### Now that we know how much dev the county will get, give it
			change_development_progress = scope:dev_given
		}
		
		### And since we used some development, we subtract that value from the available dev points
		change_variable = {
			name = loc_dev_points
			subtract = scope:dev_given
		}
		clear_saved_scope = scope:dev_points_left
		clear_saved_scope = scope:dev_needed
	}
}

### Wound two times in a row
increase_wounds_two_times_no_death_effect = {
	save_temporary_scope_value_as = {
		name = treatment_type
		value = flag:$REASON$
	}

	change_trait_rank = {
		trait = wounded
		rank = 2
		max = 3
	}

	if = { #Wounds from treatments give no infection and no additional treatment
		limit = { NOT = { scope:treatment_type = flag:treatment } }

		#CHANCE OF INFECTION
		hidden_effect = {
			random = {
				chance = 10
				trigger_event = {
					id = health.0201
					days = { 30 60 }
				}
			}
		}

		#HANDLE TREATMENT
		if = { #To send notification message or trigger the right event
			limit = {
				has_trait_rank = {
					trait = wounded
					rank = 1
				}
				court_physician_available_trigger = yes
			}
			save_scope_as = sick_character
			safe_wound_treatment_effect = yes #Wounded 1 only gives a "result of treatment" notification" if you have a physician, i.e. you get no events about it.
		}
		else_if = {
			limit = {
				has_trait_rank = {
					trait = wounded
					rank = 2
				}
				has_recent_wound_treatment_trigger = no
			}
			#A "real" event if you're not receiving treatment
			#Nothing happens if you're already being treated for wounds
			trigger_event = {
				id = health.0102
				days = { 2 3 }
			}
		}
		else_if = {
			limit = {
				has_trait_rank = {
					trait = wounded
					rank = 3
				}
				has_recent_wound_treatment_trigger = no
			}
			#A "real" event if you're not receiving treatment
			#Nothing happens if you're already being treated for wounds
			trigger_event = {
				id = health.0104
				days = { 2 3 }
			}

			#Epilepsy risk
			epilepsy_brain_trauma_risk_effect = { CHANCE = 5 }
		}
	}
	flag:$REASON$ = {} #to stop the game from complaining about unused character flags
}

#increase_wounds_two_times_effect
increase_wounds_two_times_effect = {
	if = {
		limit = {
			has_trait_rank = {
				trait = wounded
				rank < 2
			}
		}
		increase_wounds_two_times_no_death_effect = { REASON = $REASON$ }
	}
	else_if = { #Using an if because this needs to never go wrong
		limit = {
			has_trait_rank = {
				trait = wounded
				rank >= 2
			}
		}
		death = {
			death_reason = death_$REASON$
		}
	}
}

# Inflict the Blood Price on someone - blood
# Need a prisoner and an imprisoner
inflict_bloodprice = {
	$PRISONER$ = {
		if = { # No reason? Small health penalty
			limit = {
				$JAILOR$ = {
					NOR = {
						has_imprisonment_reason = $PRISONER$
						has_execute_reason = $PRISONER$
					}
				}
			}
			
			custom_tooltip = extract_blood_price_effect_no_reason_tooltip
			add_character_modifier = {
				modifier = small_blood_price_modifier
				years = 5
			}
		}
		else_if = { # Imprisonment reason? +1 Wound
			limit = { $JAILOR$ = { NOT = { has_execute_reason = $PRISONER$ } } }
			
			custom_tooltip = extract_blood_price_effect_imprisonment_reason_tooltip
			
			increase_wounds_effect = { REASON = execution_blood_price }
		}
		else = { # Execution reason? +2 Wound
			custom_tooltip = extract_blood_price_effect_execution_reason_tooltip
			
			increase_wounds_two_times_effect = { REASON = execution_blood_price }
		}
		
		consume_all_criminal_reasons_effect = {
			LIEGE = $JAILOR$
			CRIMINAL = $PRISONER$
		}
		
		$JAILOR$ = {
			add_prestige = miniscule_prestige_value
			if = {
				limit = { faith = { has_doctrine = tenet_legalism } }
				add_piety = miniscule_piety_value
			}
		}
		
		custom_tooltip = extract_blood_price_effect_survival_release_tooltip
		
		release_from_prison = yes
	}
}

#generate a three part name for summoned dragons
get_dragon_name = {
    save_scope_value_as = { name = max_length value = { integer_range = { min = 13 max = 16 } } } #13-16 feels good. longest named dragon is 14, location is 15

    # save length scopes for maths, need them to exist
    save_scope_value_as = { name = part_1_length value = 0 }
    save_scope_value_as = { name = part_2_length value = 0 }
    save_scope_value_as = { name = part_3_length value = 0 }

    # get part sizes and numbers
    get_dragon_name_part_size = { X = 1 }
    get_dragon_name_part_size = { X = 2 }
    get_dragon_name_part_size = { X = 3 }

    # if any are the same, get another
    # also some filtering
    while = { #part 1. 'the'/'of' dont tend to fit at the start
        limit = {
            OR = {
                AND = { #The
                    scope:part_1_length = 3
                    scope:part_1 = 5
                }
                AND = { #Of
                    scope:part_1_length = 2
                    scope:part_1 = 11
                }
            }
        }
        save_scope_value_as = { name = part_1_length value = 0 }
        get_dragon_name_part_size = { X = 1 }
    }
    while = { #part 2. cant be same as part 1
        limit = {
            scope:part_2_length = { compare_value = scope:part_1_length }
            scope:part_2 = { compare_value = scope:part_1 }
        }
        save_scope_value_as = { name = part_2_length value = 0 }
        get_dragon_name_part_size = { X = 2 }
    }
    while = { #part 3. 'the'/'of' dont tend to fit at the end, cant be same as part 1 or 2
        limit = {
            OR = {
                AND = {
                    scope:part_3_length = { compare_value = scope:part_1_length }
                    scope:part_3 = { compare_value = scope:part_1 }
                }
                AND = {
                    scope:part_3_length = { compare_value = scope:part_2_length }
                    scope:part_3 = { compare_value = scope:part_2 }
                }
                AND = { #The
                    scope:part_3_length = 3
                    scope:part_3 = 5
                }
                AND = { #Of
                    scope:part_3_length = 2
                    scope:part_3 = 11
                }
            }
        }
        save_scope_value_as = { name = part_3_length value = 0 }
        get_dragon_name_part_size = { X = 3 }
    }

    # convert number to name flag with switch
    set_dragon_name_part = { X = 1 }
    set_dragon_name_part = { X = 2 }
    set_dragon_name_part = { X = 3 }
}
get_dragon_name_part_size = {
    save_scope_value_as = { #save current length
        name = current_length
        value = {
            value = scope:part_1_length
            add = scope:part_2_length
            add = scope:part_3_length
        }
    }

    random_list = {
        100 = {
            trigger = { #would any of the options go over the max length? add 2 as min part length
                save_temporary_scope_value_as = { name = trig_0 value = { value = scope:current_length add = 2 } }
                scope:max_length = { compare_value < scope:trig_0 }
            }
            save_scope_value_as = { name = part_$X$_length value = 0 }
            save_scope_value_as = { name = part_$X$ value = 0 }
        }
        14 = {
            trigger = { #would this option be below max length?
                save_temporary_scope_value_as = { name = trig_2 value = { value = scope:current_length add = 2 } }
                scope:max_length = { compare_value >= scope:trig_2 }
            }
            save_scope_value_as = { name = part_$X$_length value = 2 }
            save_scope_value_as = { name = part_$X$ value = { integer_range = { min = 1 max = 14 } } }
        }
        40 = {
            trigger = { #would this option be below max length?
                save_temporary_scope_value_as = { name = trig_3 value = { value = scope:current_length add = 3 } }
                scope:max_length = { compare_value >= scope:trig_3 }
            }
            save_scope_value_as = { name = part_$X$_length value = 3 }
            save_scope_value_as = { name = part_$X$ value = { integer_range = { min = 1 max = 40 } } }
        }
        41 = {
            trigger = { #would this option be below max length?
                save_temporary_scope_value_as = { name = trig_4 value = { value = scope:current_length add = 4 } }
                scope:max_length = { compare_value >= scope:trig_4 }
            }
            save_scope_value_as = { name = part_$X$_length value = 4 }
            save_scope_value_as = { name = part_$X$ value = { integer_range = { min = 1 max = 41 } } }
        }
        10 = {
            trigger = { #would this option be below max length?
                save_temporary_scope_value_as = { name = trig_5 value = { value = scope:current_length add = 5 } }
                scope:max_length = { compare_value >= scope:trig_5 }
            }
            save_scope_value_as = { name = part_$X$_length value = 5 }
            save_scope_value_as = { name = part_$X$ value = { integer_range = { min = 1 max = 10 } } }
        }
        6 = {
            trigger = { #would this option be below max length?
                save_temporary_scope_value_as = { name = trig_6 value = { value = scope:current_length add = 6 } }
                scope:max_length = { compare_value >= scope:trig_6 }
            }
            save_scope_value_as = { name = part_$X$_length value = 6 }
            save_scope_value_as = { name = part_$X$ value = { integer_range = { min = 1 max = 6 } } }
        }
        2 = {
            trigger = { #would this option be below max length?
                save_temporary_scope_value_as = { name = trig_7 value = { value = scope:current_length add = 7 } }
                scope:max_length = { compare_value >= scope:trig_7 }
            }
            save_scope_value_as = { name = part_$X$_length value = 7 }
            save_scope_value_as = { name = part_$X$ value = { integer_range = { min = 1 max = 2 } } }
        }
        1 = {
            trigger = { #would this option be below max length?
                save_temporary_scope_value_as = { name = trig_8 value = { value = scope:current_length add = 8 } }
                scope:max_length = { compare_value >= scope:trig_8 }
            }
            save_scope_value_as = { name = part_$X$_length value = 8 }
            save_scope_value_as = { name = part_$X$ value = { integer_range = { min = 1 max = 1 } } }
        }
    }
}
set_dragon_name_part = {
    switch = {
        trigger = scope:part_$X$_length

        0 = { set_variable = { name = name$X$ value = flag:dn_blank days = 1 } } #Blank

        2 = {
            switch = {
                trigger = scope:part_$X$
                1 = { save_scope_value_as = { name = name$X$ value = flag:dn_ag } } #Burn
                2 = { save_scope_value_as = { name = name$X$ value = flag:dn_ah } } #Hunter
                3 = { save_scope_value_as = { name = name$X$ value = flag:dn_al } } #Destroyer
                4 = { save_scope_value_as = { name = name$X$ value = flag:dn_du } } #Devour
                5 = { save_scope_value_as = { name = name$X$ value = flag:dn_fo } } #Frost
                6 = { save_scope_value_as = { name = name$X$ value = flag:dn_in } } #Master
                7 = { save_scope_value_as = { name = name$X$ value = flag:dn_lo } } #Deceive
                8 = { save_scope_value_as = { name = name$X$ value = flag:dn_od } } #Snow
                9 = { save_scope_value_as = { name = name$X$ value = flag:dn_on } } #Spirit
                10 = { save_scope_value_as = { name = name$X$ value = flag:dn_qo } } #Lightning
                11 = { save_scope_value_as = { name = name$X$ value = flag:dn_se } } #Of
                12 = { save_scope_value_as = { name = name$X$ value = flag:dn_su } } #Air
                13 = { save_scope_value_as = { name = name$X$ value = flag:dn_tu } } #Hammer
                14 = { save_scope_value_as = { name = name$X$ value = flag:dn_ul } } #Eternity
            }
        }

        3 = {
            switch = {
                trigger = scope:part_$X$
                1 = { save_scope_value_as = { name = name$X$ value = flag:dn_bah } } #Wrath
                2 = { save_scope_value_as = { name = name$X$ value = flag:dn_dun } } #Grace
                3 = { save_scope_value_as = { name = name$X$ value = flag:dn_dur } } #Curse
                4 = { save_scope_value_as = { name = name$X$ value = flag:dn_fel } } #Feral
                5 = { save_scope_value_as = { name = name$X$ value = flag:dn_fin } } #The
                6 = { save_scope_value_as = { name = name$X$ value = flag:dn_fus } } #Force
                7 = { save_scope_value_as = { name = name$X$ value = flag:dn_hah } } #Mind
                8 = { save_scope_value_as = { name = name$X$ value = flag:dn_iiz } } #Ice
                9 = { save_scope_value_as = { name = name$X$ value = flag:dn_jot } } #Maw
                10 = { save_scope_value_as = { name = name$X$ value = flag:dn_kah } } #Pride
                11 = { save_scope_value_as = { name = name$X$ value = flag:dn_kro } } #Sorcerer
                12 = { save_scope_value_as = { name = name$X$ value = flag:dn_kun } } #Moonlight
                13 = { save_scope_value_as = { name = name$X$ value = flag:dn_lok } } #Rise
                14 = { save_scope_value_as = { name = name$X$ value = flag:dn_lot } } # Great
                15 = { save_scope_value_as = { name = name$X$ value = flag:dn_luv } } #Tear
                16 = { save_scope_value_as = { name = name$X$ value = flag:dn_mah } } #Fall/Fell
                17 = { save_scope_value_as = { name = name$X$ value = flag:dn_mir } } #Allegiance
                18 = { save_scope_value_as = { name = name$X$ value = flag:dn_mul } } #Strong
                19 = { save_scope_value_as = { name = name$X$ value = flag:dn_nah } } #Fury
                20 = { save_scope_value_as = { name = name$X$ value = flag:dn_nax } } #Cruelty
                21 = { save_scope_value_as = { name = name$X$ value = flag:dn_neh } } #Never
                22 = { save_scope_value_as = { name = name$X$ value = flag:dn_nin } } #Sting
                23 = { save_scope_value_as = { name = name$X$ value = flag:dn_nir } } #Hunt
                24 = { save_scope_value_as = { name = name$X$ value = flag:dn_nos } } #Strike
                25 = { save_scope_value_as = { name = name$X$ value = flag:dn_qah } } #Armor
                26 = { save_scope_value_as = { name = name$X$ value = flag:dn_rel } } #Domination
                27 = { save_scope_value_as = { name = name$X$ value = flag:dn_rot } } #Word
                28 = { save_scope_value_as = { name = name$X$ value = flag:dn_sah } } #Phantom
                29 = { save_scope_value_as = { name = name$X$ value = flag:dn_sot } } #White
                30 = { save_scope_value_as = { name = name$X$ value = flag:dn_sov } } #Shock
                31 = { save_scope_value_as = { name = name$X$ value = flag:dn_sul } } #Day
                32 = { save_scope_value_as = { name = name$X$ value = flag:dn_vah } } #Spring
                33 = { save_scope_value_as = { name = name$X$ value = flag:dn_ved } } #Black
                34 = { save_scope_value_as = { name = name$X$ value = flag:dn_vey } } #Cut
                35 = { save_scope_value_as = { name = name$X$ value = flag:dn_vol } } #Horror
                36 = { save_scope_value_as = { name = name$X$ value = flag:dn_vul } } #Dark
                37 = { save_scope_value_as = { name = name$X$ value = flag:dn_vur } } #Valor
                38 = { save_scope_value_as = { name = name$X$ value = flag:dn_yol } } #Fire
                39 = { save_scope_value_as = { name = name$X$ value = flag:dn_zii } } #Spirit
                40 = { save_scope_value_as = { name = name$X$ value = flag:dn_zin } } #Honor
            }
        }

        4 = {
            switch = {
                trigger = scope:part_$X$
                1 = { save_scope_value_as = { name = name$X$ value = flag:dn_brii } } #Beauty
                2 = { save_scope_value_as = { name = name$X$ value = flag:dn_brit } } #Beautiful
                3 = { save_scope_value_as = { name = name$X$ value = flag:dn_daan } } #Doom
                4 = { save_scope_value_as = { name = name$X$ value = flag:dn_drog } } #Lord
                5 = { save_scope_value_as = { name = name$X$ value = flag:dn_duul } } #Crown
                6 = { save_scope_value_as = { name = name$X$ value = flag:dn_feyn } } #Bane
                7 = { save_scope_value_as = { name = name$X$ value = flag:dn_fiik } } #Mirror
                8 = { save_scope_value_as = { name = name$X$ value = flag:dn_frin } } #Hot
                9 = { save_scope_value_as = { name = name$X$ value = flag:dn_gaaf } } #Ghost
                10 = { save_scope_value_as = { name = name$X$ value = flag:dn_gaar } } #Unleash/Release
                11 = { save_scope_value_as = { name = name$X$ value = flag:dn_golz } } #Stone
                12 = { save_scope_value_as = { name = name$X$ value = flag:dn_grah } } #Battle
                13 = { save_scope_value_as = { name = name$X$ value = flag:dn_gron } } #Bind
                14 = { save_scope_value_as = { name = name$X$ value = flag:dn_heyv } } #Duty
                15 = { save_scope_value_as = { name = name$X$ value = flag:dn_jiid } } #Moon
                16 = { save_scope_value_as = { name = name$X$ value = flag:dn_kaal } } #Champion
                17 = { save_scope_value_as = { name = name$X$ value = flag:dn_kein } } #War
                18 = { save_scope_value_as = { name = name$X$ value = flag:dn_kest } } #Tempest
                19 = { save_scope_value_as = { name = name$X$ value = flag:dn_kren } } #Break
                20 = { save_scope_value_as = { name = name$X$ value = flag:dn_krif } } #Fight
                21 = { save_scope_value_as = { name = name$X$ value = flag:dn_krii } } #Kill
                22 = { save_scope_value_as = { name = name$X$ value = flag:dn_kril } } #Brave
                23 = { save_scope_value_as = { name = name$X$ value = flag:dn_krin } } #Courageous
                24 = { save_scope_value_as = { name = name$X$ value = flag:dn_laas } } #Life
                25 = { save_scope_value_as = { name = name$X$ value = flag:dn_liiv } } #Wither
                26 = { save_scope_value_as = { name = name$X$ value = flag:dn_maar } } #Terror
                27 = { save_scope_value_as = { name = name$X$ value = flag:dn_moro } } #Glory
                28 = { save_scope_value_as = { name = name$X$ value = flag:dn_naak } } #Eat
                29 = { save_scope_value_as = { name = name$X$ value = flag:dn_odus } } #Snowy
                30 = { save_scope_value_as = { name = name$X$ value = flag:dn_onik } } #Wise
                31 = { save_scope_value_as = { name = name$X$ value = flag:dn_paar } } #Ambition
                32 = { save_scope_value_as = { name = name$X$ value = flag:dn_paaz } } #Fair
                33 = { save_scope_value_as = { name = name$X$ value = flag:dn_qeth } } #Bone
                34 = { save_scope_value_as = { name = name$X$ value = flag:dn_ruth } } #Rage
                35 = { save_scope_value_as = { name = name$X$ value = flag:dn_thur } } #Overlord
                36 = { save_scope_value_as = { name = name$X$ value = flag:dn_tiid } } #Time
                37 = { save_scope_value_as = { name = name$X$ value = flag:dn_vaaz } } #Tear
                38 = { save_scope_value_as = { name = name$X$ value = flag:dn_viin } } #Shine
                39 = { save_scope_value_as = { name = name$X$ value = flag:dn_viir } } #Dying
                40 = { save_scope_value_as = { name = name$X$ value = flag:dn_zind } } #Triumph
                41 = { save_scope_value_as = { name = name$X$ value = flag:dn_zoor } } #Legend
            }
        }

        5 = {
            switch = {
                trigger = scope:part_$X$
                1 = { save_scope_value_as = { name = name$X$ value = flag:dn_ahzid } } #Bitter
                2 = { save_scope_value_as = { name = name$X$ value = flag:dn_hevno } } #Brutal
                3 = { save_scope_value_as = { name = name$X$ value = flag:dn_kriid } } #Slayer
                4 = { save_scope_value_as = { name = name$X$ value = flag:dn_munax } } #Cruel
                5 = { save_scope_value_as = { name = name$X$ value = flag:dn_okaaz } } #Sea
                6 = { save_scope_value_as = { name = name$X$ value = flag:dn_revak } } #Sacred
                7 = { save_scope_value_as = { name = name$X$ value = flag:dn_strun } } #Storm
                8 = { save_scope_value_as = { name = name$X$ value = flag:dn_viing } } #Wing
                9 = { save_scope_value_as = { name = name$X$ value = flag:dn_vokun } } #Shadow
                10 = { save_scope_value_as = { name = name$X$ value = flag:dn_yuvon } } #Gold/Golden
            }
        }

        6 = {
            switch = {
                trigger = scope:part_$X$
                1 = { save_scope_value_as = { name = name$X$ value = flag:dn_boziik } } #Bold(ly)
                2 = { save_scope_value_as = { name = name$X$ value = flag:dn_kinzon } } #Sharp
                3 = { save_scope_value_as = { name = name$X$ value = flag:dn_nonvul } } #Noble
                4 = { save_scope_value_as = { name = name$X$ value = flag:dn_rovaan } } #Wander
                5 = { save_scope_value_as = { name = name$X$ value = flag:dn_sahrot } } #Mighty
                6 = { save_scope_value_as = { name = name$X$ value = flag:dn_vahlok } } #Guardian
            }
        }

        7 = {
            switch = {
                trigger = scope:part_$X$
                1 = { save_scope_value_as = { name = name$X$ value = flag:dn_bahlaan } } #Worthy
                2 = { save_scope_value_as = { name = name$X$ value = flag:dn_kruziik } } #Ancient
            }
        }

        8 = {
            switch = {
                trigger = scope:part_$X$
                1 = { save_scope_value_as = { name = name$X$ value = flag:dn_nahkriin } } #Vengeance
            }
        }
    }
}

### Daedric whispers - Give the right combo of trait and daedra
# Flag
set_combo_trait_daedra_flag = {
	add_character_flag = stress_$TRAIT$_$DAEDRA$
}