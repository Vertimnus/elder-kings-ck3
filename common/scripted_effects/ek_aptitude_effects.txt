# add_aptitude_skill = { VALUE = x }
# add_aptitude_skill = {
#     if = {
#         limit = { NOT = { exists = var:aptitude_base } }
#         #limit = { NOT = { has_variable = aptitude_base } }
#         set_variable = { name = aptitude_base value = 0 }
#     }
#     custom_description = {
#         text = add_aptitude_skill
#         value = $VALUE$
#         change_variable = { name = aptitude_base add = $VALUE$ }
#     }
#     if = {
#         limit = { var:aptitude_base < 0 }
#         set_variable = { name = aptitude_base value = 0 }
#     }
# }
add_aptitude_skill = {
    custom_description = {
        text = add_aptitude_skill
        value = $VALUE$
        if = {
            #limit = { NOT = { exists = var:aptitude_base } }
            limit = { NOT = { has_variable = aptitude_base } }
            set_variable = { name = aptitude_base value = $VALUE$ }
            if = { #this is nested to stop the error log having an aneurism if the variable doesn't exist
                limit = { $VALUE$ < 0 }
                set_variable = { name = aptitude_base value = 0 }
            }
        }
        else = {
            change_variable = { name = aptitude_base add = $VALUE$ }
            if = {
                limit = { var:aptitude_base < 0 }
                set_variable = { name = aptitude_base value = 0 }
            }
        }
    }
}
# add_magicka = {
#     if = {
#         limit = { NOT = { exists = var:magicka } }
#         #limit = { NOT = { has_variable = magicka } }
#         set_variable = { name = magicka value = 0 }
#     }
#     custom_description = {
#         text = add_magicka
#         value = $VALUE$
#         change_variable = { name = magicka add = $VALUE$ }
#     }
#     if = {
#         limit = { var:magicka > magicka_max }
#         set_variable = { name = magicka value = magicka_max }
#     }
# }
add_magicka = {
    custom_description = {
        text = add_magicka
        value = $VALUE$
        if = {
            #limit = { NOT = { exists = var:magicka } }
            limit = { NOT = { has_variable = magicka } }
            if = {
                limit = { NOT = { $VALUE$ = 0 } }
                set_variable = { name = magicka value = $VALUE$ }
                if = {
                    limit = { $VALUE$ > magicka_max }
                    set_variable = { name = magicka value = magicka_max }
                }
            }
        }
        else = {
            change_variable = { name = magicka add = $VALUE$ }
            if = {
                limit = { var:magicka > magicka_max }
                set_variable = { name = magicka value = magicka_max }
            }
        }
    }
}
add_quarterly_magicka_effect = {
    trigger_event = {
        on_action = add_monthly_magicka
        #days = 0
    }
    trigger_event = {
        on_action = add_monthly_magicka
        months = 1
    }
    trigger_event = {
        on_action = add_monthly_magicka
        months = 2
    }
}
add_monthly_magicka_effect = {
    add_magicka = { VALUE = magicka_monthly }
    every_general_councillor = {
        limit = {
            has_council_position = councillor_court_mage
            is_performing_council_task = task_court_mage_default
        }
        add_magicka = { VALUE = magicka_monthly }
    }
}

# spell_caster_effect = {
#     if = { #actual effect here
#         limit = { has_variable = spell_cast_enabled }
#         #add_magicka = { VALUE = -10 }
#         #add_magicka = { VALUE = spell_$SPELL$_cost }
#         var:spell_caster = { spell_$SPELL$_caster_effect = yes }
#         var:spell_recipient = { spell_$SPELL$_castee_effect = yes }
#         if = {
#             limit = { var:spell_province = { has_variable = $SCHOOL$_province } }
#             var:spell_recipient = { spell_$SPELL$_province_effect = yes }
#         }
#     }
#     else = {
#         hidden_effect = { #move to recipient and have is_valid and execute check for not variable clear on cast
#             set_variable = { name = spell_selected value = flag:$SPELL$ }
#             spell_reset_recipient = yes
#         }
#         custom_label = spell_name_caster
#         show_as_tooltip = { #effect here is for tooltip
#             spell_$SPELL$_caster_effect = yes
#         }
#     }
# }
# spell_castee_effect = {
#     custom_label = spell_name_castee
#     spell_$SPELL$_castee_effect = yes
# }
# spell_province_effect = {
#     #custom_label = spell_name_castee
#     spell_$SPELL$_province_effect = yes
# }
spell_reset_recipient = {
    if = {
        limit = { has_variable = spell_recipient_old }
        set_variable = { name = spell_recipient value = var:spell_recipient_old }
        remove_variable = spell_recipient_old
    }
}

spell_cleanup = {
    remove_variable = spell_selected
    remove_variable = spell_recipient
    remove_variable = spell_recipient_old
    remove_variable = spell_caster
    remove_variable = spell_cast_enabled
    remove_variable = spell_school
    clear_variable_list = spell_list
    remove_variable = spell_county
    clear_variable_list = spell_counties
    remove_variable = spell_province
    # remove_variable = spell_is_hostile
    # remove_variable = spell_is_province
}

# Alteration
spell_oakflesh_caster_effect = {
    add_magicka = { VALUE = neg_spell_cost_oakflesh }
}
spell_oakflesh_castee_effect = {
    add_aptitude_skill = { VALUE = 3 }
}
spell_wards_caster_effect = {
    add_magicka = { VALUE = neg_spell_cost_wards }
}
# spell_wards_castee_effect = {
#     add_aptitude_skill = { VALUE = 4 }
# }
spell_wards_province_effect = {
    add_county_modifier = invested_in_province_modifier
}

# Conjuration
spell_summon_scamp_caster_effect = {
    add_magicka = { VALUE = neg_spell_cost_summon_scamp }
}
spell_summon_scamp_castee_effect = {
    add_aptitude_skill = { VALUE = 3 }
}

# Destruction
spell_flames_caster_effect = {
    add_magicka = { VALUE = neg_spell_cost_flames }
}
spell_flames_castee_effect = {
    add_aptitude_skill = { VALUE = 1 }
}
spell_frostbite_caster_effect = {
    add_magicka = { VALUE = neg_spell_cost_frostbite }
}
spell_frostbite_castee_effect = {
    add_aptitude_skill = { VALUE = 2 }
}
spell_sparks_caster_effect = {
    add_magicka = { VALUE = neg_spell_cost_sparks }
}
spell_sparks_castee_effect = {
    add_aptitude_skill = { VALUE = 3 }
}
spell_firestorm_caster_effect = {
    add_magicka = { VALUE = neg_spell_cost_firestorm }
}
# spell_firestorm_castee_effect = {
#     add_aptitude_skill = { VALUE = 4 }
# }
spell_firestorm_province_effect = {
    add_county_modifier = { modifier = modifier_spell_firestorm years = 3 }
}

# Illusion
spell_frenzy_caster_effect = {
    add_magicka = { VALUE = neg_spell_cost_frenzy }
}
spell_frenzy_castee_effect = {
    add_aptitude_skill = { VALUE = 3 }
}

# Restoration
spell_heal_caster_effect = {
    add_magicka = { VALUE = neg_spell_cost_heal }
}
spell_heal_castee_effect = {
    add_aptitude_skill = { VALUE = 3 }
}

# Necromancy
spell_raise_dead_caster_effect = {
    add_magicka = { VALUE = neg_spell_cost_raise_dead }
}
spell_raise_dead_castee_effect = {
    add_aptitude_skill = { VALUE = 3 }
}

# global spell lists up to 45 is fine, after some need to be skipped maybe if wasteland is invalid

add_spell = {
    PREV = { add_to_variable_list = { name = spell_list target = PREV } }
    set_variable = { name = spell value = flag:$NAME$ }
}

init_alteration = {
    clear_variable_list = spell_list
    province:1 = { add_spell = { NAME = oakflesh } }
    province:2 = { add_spell = { NAME = wards } }
}
init_conjuration = {
    clear_variable_list = spell_list
    province:1 = { add_spell = { NAME = summon_scamp } }
}
init_destruction = {
    clear_variable_list = spell_list
    province:1 = { add_spell = { NAME = flames } }
    province:2 = { add_spell = { NAME = frostbite } }
    province:3 = { add_spell = { NAME = sparks } }
    province:4 = { add_spell = { NAME = firestorm } }
}
init_illusion = {
    clear_variable_list = spell_list
    province:1 = { add_spell = { NAME = frenzy } }
}
init_restoration = {
    clear_variable_list = spell_list
    province:1 = { add_spell = { NAME = heal } }
}
init_necromancy = {
    clear_variable_list = spell_list
    province:1 = { add_spell = { NAME = raise_dead } }
}

spell_list_school = {
    clear_variable_list = spell_list
    every_in_global_list = { # ordered, based on spell level
        variable = spell_list_$SCHOOL$
        PREV = { add_to_variable_list = { name = spell_list target = PREV } }
    }
}

school_spell_master_effect = {
    switch = {
        trigger = var:spell_school

        flag:alteration = {
            switch = {
                trigger = scope:spell.var:spell
                flag:oakflesh = { $EFFECT$ = { SCHOOL = alteration SPELL = oakflesh } }
                flag:wards = { $EFFECT$ = { SCHOOL = alteration SPELL = wards } }
            }
        }

        flag:conjuration = {
            switch = {
                trigger = scope:spell.var:spell
                flag:summon_scamp = { $EFFECT$ = { SCHOOL = conjuration SPELL = summon_scamp } }
            }
        }

        flag:destruction = {
            switch = {
                trigger = scope:spell.var:spell
                flag:flames = { $EFFECT$ = { SCHOOL = destruction SPELL = flames } }
                flag:frostbite = { $EFFECT$ = { SCHOOL = destruction SPELL = frostbite } }
                flag:sparks = { $EFFECT$ = { SCHOOL = destruction SPELL = sparks } }
                flag:firestorm = { $EFFECT$ = { SCHOOL = destruction SPELL = firestorm } }
            }
        }

        flag:illusion = {
            switch = {
                trigger = scope:spell.var:spell
                flag:frenzy = { $EFFECT$ = { SCHOOL = illusion SPELL = frenzy } }
            }
        }

        flag:restoration = {
            switch = {
                trigger = scope:spell.var:spell
                flag:heal = { $EFFECT$ = { SCHOOL = restoration SPELL = heal } }
            }
        }

        flag:necromancy = {
            switch = {
                trigger = scope:spell.var:spell
                flag:raise_dead = { $EFFECT$ = { SCHOOL = conjuration SPELL = raise_dead } } #temp necro -> conjuration as perks dont exist not sure how to handle
            }
        }
    }
}

# spell_select_effect = {
#     school_spell_master_effect = { EFFECT = spell_select }
# }
# spell_select = {
#     save_temporary_scope_value_as = { name = unimportant value = flag:$SCHOOL$ } # school not currently used, a use is needed
# 	set_variable = { VALUE = $SPELL$_cost }
# }

spell_caster_effect = {
    school_spell_master_effect = { EFFECT = spell_caster }
}
spell_caster = {
    save_temporary_scope_value_as = { name = unimportant value = flag:$SCHOOL$ } # school not currently used, a use is needed
    var:spell_caster = {
        custom_label = spell_name_caster
        save_temporary_scope_value_as = { name = cost value = { value = 0 subtract = $SPELL$_cost } }
        add_magicka = { VALUE = scope:cost }
    }
}

spell_castee_effect = {
    school_spell_master_effect = { EFFECT = spell_castee }
}
spell_castee = {
    save_temporary_scope_value_as = { name = unimportant value = flag:$SCHOOL$ } # school not currently used, a use is needed

    custom_label = spell_name_castee
    if = {
        limit = { $SPELL$_province = 0 } #cast on the castee if not a province spell
        var:spell_recipient = { spell_$SPELL$_castee_effect = yes }
        if = {
            limit = { #opinion malus for casting hostile spells
                $SPELL$_hostile = 1
                NOR = {
                    var:spell_recipient = ROOT # cant cast on self
                    var:spell_recipient = var:spell_caster # cant order cm to cast on self
                }
            }
            var:spell_recipient = { add_opinion = { target = PREV modifier = cast_hostile_spell } }
        }
    }
    if = {
        limit = { #cast on the selected county for province spells. no special treatment for hostile currently
            $SPELL$_province = 1
            exists = var:spell_county #need to check against current location for hostile. may just use current location directly
            # trigger_if = { #need to block if no valid counties. exists should work
            #     limit = { variable_list_size = { name = spell_counties value > 0 } }
            # }
        }
        var:spell_county = { spell_$SPELL$_province_effect = yes }
    }
}