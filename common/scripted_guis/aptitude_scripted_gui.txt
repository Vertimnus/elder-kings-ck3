# Education
aptitude_education_magical_ability = {
	scope = character
	is_shown = { has_trait = education_magical_ability }
}

# Lifestyle
aptitude_mystic = {
	scope = character
	is_shown = { has_trait = lifestyle_mystic }
}
aptitude_scholar = {
	scope = character
	is_shown = { has_trait = scholar }
}
aptitude_conjurer = {
	scope = character
	is_shown = { has_trait = conjurer }
}
aptitude_soul_magic = {
	scope = character
	is_shown = { has_trait = soul_magic }
}

# Personility
aptitude_lazy = {
	scope = character
	is_shown = { has_trait = lazy }
}
aptitude_diligent = {
	scope = character
	is_shown = { has_trait = diligent }
}
aptitude_patient = {
	scope = character
	is_shown = { has_trait = patient }
}
aptitude_impatient = {
	scope = character
	is_shown = { has_trait = impatient }
}
aptitude_shy = {
	scope = character
	is_shown = { has_trait = shy }
}
aptitude_ambitious = {
	scope = character
	is_shown = { has_trait = ambitious }
}

# Stress
aptitude_drunkard = {
	scope = character
	is_shown = { has_trait = drunkard }
}
aptitude_hashishiyah = {
	scope = character
	is_shown = { has_trait = hashishiyah }
}
aptitude_reclusive = {
	scope = character
	is_shown = { has_trait = reclusive }
}
aptitude_irritable = {
	scope = character
	is_shown = { has_trait = irritable }
}
aptitude_journaller = {
	scope = character
	is_shown = { has_trait = journaller }
}

# Genetic
aptitude_intellect = {
	scope = character
	is_shown = {
		OR = {
			has_trait = intellect_bad
			has_trait = intellect_good
		}
	}
}
aptitude_inbred = {
	scope = character
	is_shown = { has_trait = inbred }
}

# Health
aptitude_infirm = {
	scope = character
	is_shown = { has_trait = infirm }
}
aptitude_incapable = {
	scope = character
	is_shown = { has_trait = incapable }
}
aptitude_lunatic = {
	scope = character
	is_shown = { has_trait = lunatic }
}
aptitude_possessed = {
	scope = character
	is_shown = { has_trait = possessed }
}

# Disease
aptitude_ill = {
	scope = character
	is_shown = { has_trait = ill }
}
aptitude_pneumonic = {
	scope = character
	is_shown = { has_trait = pneumonic }
}
aptitude_great_pox = {
	scope = character
	is_shown = { has_trait = great_pox }
}
aptitude_consumption = {
	scope = character
	is_shown = { has_trait = consumption }
}
aptitude_typhus = {
	scope = character
	is_shown = { has_trait = typhus }
}
aptitude_bubonic_plague = {
	scope = character
	is_shown = { has_trait = bubonic_plague }
}
aptitude_smallpox = {
	scope = character
	is_shown = { has_trait = smallpox }
}

# Physical
aptitude_shrewd = {
	scope = character
	is_shown = { has_trait = shrewd }
}
aptitude_dull = {
	scope = character
	is_shown = { has_trait = dull }
}

# Criminal
aptitude_witch_group = {
	scope = character
	is_shown = { has_trait = witch_group }
}
aptitude_necromancer = {
	scope = character
	is_shown = { has_trait = necromancer }
}

# Other
aptitude_adventurer = {
	scope = character
	is_shown = { has_trait = adventurer }
}

# Patrons & Birthsigns
aptitude_p_magnus = {
	scope = character
	is_shown = { has_trait = p_magnus }
}
aptitude_p_julianos = {
	scope = character
	is_shown = { has_trait = p_julianos }
}
aptitude_p_hermaeus = {
	scope = character
	is_shown = { has_trait = p_hermaeus }
}
aptitude_sign_mage = {
	scope = character
	is_shown = { has_trait = sign_mage }
}
aptitude_sign_apprentice = {
	scope = character
	is_shown = { has_trait = sign_apprentice }
}
aptitude_sign_atronach = {
	scope = character
	is_shown = { has_trait = sign_atronach }
}

#################
##  SPELLBOOK  ##
#################

spell_open = {
	scope = character
	effect = { remove_variable = spells_open }
}

spell_cleanup = { #observer in hud.gui actually triggers spellbook widget
	scope = character
	effect = { spell_cleanup = yes }
}

spell_switch_caster = {
	scope = character

	is_valid = {
		any_general_councillor = { #only check spouse and mage, slightly faster than any_councillor
			has_council_position = councillor_court_mage
			is_performing_council_task = task_court_mage_default
		}
	}

	effect = {
		if = {
			limit = {
				var:spell_caster = ROOT
				any_general_councillor = { #needed for scope
					has_council_position = councillor_court_mage
					is_performing_council_task = task_court_mage_default
					save_temporary_scope_as = court_mage
				}
			}
			set_variable = { name = spell_caster value = scope:court_mage }
		}
		else = {
			set_variable = { name = spell_caster value = ROOT }
		}
	}
}

spell_select_province_clear = {
	scope = character

	effect = {
		remove_variable = spell_county
		clear_variable_list = spell_counties
	}
}

spell_select_province = {
	scope = character

	effect = {
		remove_variable = spell_county
		clear_variable_list = spell_counties
		if = {
			limit = { NOT = { has_variable = spell_county } }
			var:spell_recipient = {
				ROOT = { set_variable = { name = spell_county value = PREV.capital_county } }
				every_held_title = { #ordered_held_title
					limit = { tier = tier_county } #need an is valid for execution to stop selecting, title being lost, casting
					ROOT = { add_to_variable_list = { name = spell_counties target = PREV } }
				}
			}
		}
	}
}

spell_select_province_hostile = {
	type = character

	effect = {
		remove_variable = spell_county
		clear_variable_list = spell_counties
		if = {
			limit = {
				ROOT.location.province_owner = {
					OR = { # is the caster at war with the province owner or any char above them
						is_at_war_with = ROOT
						any_liege_or_above = {
							is_at_war_with = ROOT
						}
					}
				}
				# any_war_enemy = {
				# 	OR = {
				# 		is_liege_or_above_of = ROOT.location.province_owner
				# 		ROOT.location.province_owner = THIS
				# 	}
				# }
			}
			set_variable = { name = spell_recipient_old value = var:spell_recipient }
			set_variable = { name = spell_recipient value = ROOT.location.county.holder } #save old target as temp var then return to previous target on new select
			add_to_variable_list = { name = spell_counties target = ROOT.location.county } #need an is valid for execution to stop selecting, moving out of province, casting
			set_variable = { name = spell_county value = ROOT.location.county }
		}
	}
}

spell_province_pick = {
	type = character

	saved_scope = {
		county
	}

	effect = { set_variable = { name = spell_county value = scope:county } }
}

get_spell_province = {
	type = character

	saved_scope = {
		spell_province
	}

	effect = { set_variable = { name = spell_province value = scope:spell_province } }
}

enable_casting = {
	scope = character
	effect = { set_variable = spell_cast_enabled } #very tempory variable. if it is visible on the character something has gone wrong
}

#############
## Schools ##
#############

spell_school_alteration = {
	scope = character

	is_valid = { NOT = { var:spell_school = flag:alteration } }

	effect = {
		set_variable = { name = spell_school value = flag:alteration }
		spell_list_school = { SCHOOL = alteration }
		set_variable = { name = spell_selected value = flag:no_spell }
		remove_variable = spell_province
		# remove_variable = spell_is_hostile
		# remove_variable = spell_is_province
		spell_reset_recipient = yes
	}
}
alteration_spell_no_spell_caster = {
	scope = character
	is_shown = { always = no }
}

spell_school_conjuration = {
	scope = character

	is_valid = { NOT = { var:spell_school = flag:conjuration } }

	effect = {
		set_variable = { name = spell_school value = flag:conjuration }
		spell_list_school = { SCHOOL = conjuration }
		set_variable = { name = spell_selected value = flag:no_spell }
		remove_variable = spell_province
		# remove_variable = spell_is_hostile
		# remove_variable = spell_is_province
		spell_reset_recipient = yes
	}
}
conjuration_spell_no_spell_caster = {
	scope = character
	is_shown = { always = no }
}

spell_school_destruction = {
	scope = character

	is_valid = { NOT = { var:spell_school = flag:destruction } }

	effect = {
		set_variable = { name = spell_school value = flag:destruction }
		spell_list_school = { SCHOOL = destruction }
		set_variable = { name = spell_selected value = flag:no_spell }
		remove_variable = spell_province
		# remove_variable = spell_is_hostile
		# remove_variable = spell_is_province
		spell_reset_recipient = yes
	}
}
destruction_spell_no_spell_caster = {
	scope = character
	is_shown = { always = no }
}

spell_school_illusion = {
	scope = character

	is_valid = { NOT = { var:spell_school = flag:illusion } }

	effect = {
		set_variable = { name = spell_school value = flag:illusion }
		spell_list_school = { SCHOOL = illusion }
		set_variable = { name = spell_selected value = flag:no_spell }
		remove_variable = spell_province
		# remove_variable = spell_is_hostile
		# remove_variable = spell_is_province
		spell_reset_recipient = yes
	}
}
illusion_spell_no_spell_caster = {
	scope = character
	is_shown = { always = no }
}

spell_school_restoration = {
	scope = character

	is_valid = { NOT = { var:spell_school = flag:restoration } }

	effect = {
		set_variable = { name = spell_school value = flag:restoration }
		spell_list_school = { SCHOOL = restoration }
		set_variable = { name = spell_selected value = flag:no_spell }
		remove_variable = spell_province
		# remove_variable = spell_is_hostile
		# remove_variable = spell_is_province
		spell_reset_recipient = yes
	}
}
restoration_spell_no_spell_caster = {
	scope = character
	is_shown = { always = no }
}

spell_school_necromancy = {
	scope = character

	is_valid = { NOT = { var:spell_school = flag:necromancy } }

	effect = {
		set_variable = { name = spell_school value = flag:necromancy }
		spell_list_school = { SCHOOL = necromancy }
		set_variable = { name = spell_selected value = flag:no_spell }
		remove_variable = spell_province
		# remove_variable = spell_is_hostile
		# remove_variable = spell_is_province
		spell_reset_recipient = yes
	}
}
necromancy_spell_no_spell_caster = {
	scope = character
	is_shown = { always = no }
}

############
## SPELLS ##
############

#need char death checks, move check, self/cm check
#province location check
#unlanded of block for no valid provinces
#spell info showing unlanded, spell desc showing invalid/no provinces

# ordered_in_list by script value, script value is any_in_list {limit = object=scope}
# while loop that increments count, so check first, then second in ordered_list for match
# scriptvalues evaluate properly for

# Alteration

alteration_spell_oakflesh_caster = {
	scope = character

	is_valid = {
		#spell_knows_oakflesh = yes
		always = yes #for testing
	}

	is_shown = {
		has_magicka = { VALUE = spell_cost_oakflesh }
		#always = yes #for testing
	}

	effect = {
		spell_caster_effect = { SCHOOL = alteration SPELL = oakflesh }
	}
}

alteration_spell_oakflesh_recipient = {
	scope = character

	is_shown = {
		var:spell_selected = flag:oakflesh
	}

	effect = {
		spell_castee_effect = { SPELL = oakflesh }
	}
}

alteration_spell_wards_caster = {
	scope = character

	is_valid = {
		#spell_knows_wards = yes
		always = yes #for testing
	}

	is_shown = {
		has_magicka = { VALUE = spell_cost_wards }
		#always = yes #for testing
	}

	effect = {
		spell_caster_effect = { SCHOOL = alteration SPELL = wards }
	}
}

alteration_spell_wards_recipient = {
	scope = character

	is_shown = {
		var:spell_selected = flag:wards # replaced with system variable
	}

	effect = {
		spell_castee_effect = { SPELL = wards }
	}
}

alteration_spell_wards_province = {
	scope = landed_title

	effect = {
		spell_province_effect = { SPELL = wards }
	}
}

# Conjuration

conjuration_spell_summon_scamp_caster = {
	scope = character

	is_valid = {
		#spell_knows_summon_scamp = yes
		always = yes #for testing
	}

	is_shown = {
		has_magicka = { VALUE = spell_cost_summon_scamp }
		#always = yes #for testing
	}

	effect = {
		spell_caster_effect = { SCHOOL = conjuration SPELL = summon_scamp }
	}
}

conjuration_spell_summon_scamp_recipient = {
	scope = character

	is_shown = {
		var:spell_selected = flag:summon_scamp
	}

	effect = {
		spell_castee_effect = { SPELL = summon_scamp }
	}
}

# Destruction

destruction_spell_flames_caster = {
	scope = character

	is_valid = {
		#spell_knows_flames = yes
		always = yes #for testing
	}

	is_shown = {
		has_magicka = { VALUE = spell_cost_flames }
		spell_target_valid = yes
		#always = yes #for testing
	}

	effect = {
		spell_caster_effect = { SCHOOL = destruction SPELL = flames }
	}
}

destruction_spell_flames_recipient = {
	scope = character

	is_shown = {
		var:spell_selected = flag:flames
	}

	effect = {
		spell_castee_effect = { SPELL = flames }
	}
}

destruction_spell_frostbite_caster = {
	scope = character

	is_valid = {
		#spell_knows_frostbite = yes
		always = yes #for testing
	}

	is_shown = {
		has_magicka = { VALUE = spell_cost_frostbite }
		spell_target_valid = no
		#always = yes #for testing
	}

	effect = {
		spell_caster_effect = { SCHOOL = destruction SPELL = frostbite }
	}
}

destruction_spell_frostbite_recipient = {
	scope = character

	is_shown = {
		var:spell_selected = flag:frostbite
	}

	effect = {
		spell_castee_effect = { SPELL = frostbite }
	}
}

destruction_spell_sparks_caster = {
	scope = character

	is_valid = {
		#spell_knows_sparks = yes
		always = no #for testing
	}

	is_shown = {
		has_magicka = { VALUE = spell_cost_sparks }
		#always = yes #for testing
	}

	effect = {
		spell_caster_effect = { SCHOOL = destruction SPELL = sparks }
	}
}

destruction_spell_sparks_recipient = {
	scope = character

	is_shown = {
		var:spell_selected = flag:sparks
	}

	effect = {
		spell_castee_effect = { SPELL = sparks }
	}
}

destruction_spell_firestorm_caster = {
	scope = character

	is_valid = {
		#spell_knows_firestorm = yes
		always = yes #for testing
	}

	is_shown = {
		has_magicka = { VALUE = spell_cost_firestorm }
		#always = yes #for testing
	}

	effect = {
		spell_caster_effect = { SCHOOL = destruction SPELL = firestorm }
	}
}

destruction_spell_firestorm_recipient = {
	scope = character

	is_shown = {
		var:spell_selected = flag:firestorm
	}

	effect = {
		spell_castee_effect = { SPELL = firestorm }
	}
}

destruction_spell_firestorm_province = {
	scope = landed_title

	effect = {
		spell_province_effect = { SPELL = firestorm }
	}
}

# Illusion

illusion_spell_frenzy_caster = {
	scope = character

	is_valid = {
		#spell_knows_frenzy = yes
		always = yes #for testing
	}

	is_shown = {
		has_magicka = { VALUE = spell_cost_frenzy }
		#always = yes #for testing
	}

	effect = {
		spell_caster_effect = { SCHOOL = illusion SPELL = frenzy }
	}
}

illusion_spell_frenzy_recipient = {
	scope = character

	is_shown = {
		var:spell_selected = flag:frenzy
	}

	effect = {
		spell_castee_effect = { SPELL = frenzy }
	}
}

# Restoration

restoration_spell_heal_caster = {
	scope = character

	is_valid = {
		#spell_knows_heal = yes
		always = yes #for testing
	}

	is_shown = {
		has_magicka = { VALUE = spell_cost_heal }
		#always = yes #for testing
	}

	effect = {
		spell_caster_effect = { SCHOOL = restoration SPELL = heal }
	}
}

restoration_spell_heal_recipient = {
	scope = character

	is_shown = {
		var:spell_selected = flag:heal
	}

	effect = {
		spell_castee_effect = { SPELL = heal }
	}
}

# Necromancy

necromancy_spell_raise_dead_caster = {
	scope = character

	is_valid = {
		#spell_knows_raise_dead = yes
		always = yes #for testing
	}

	is_shown = {
		has_magicka = { VALUE = spell_cost_raise_dead }
		#always = yes #for testing
	}

	effect = {
		spell_caster_effect = { SCHOOL = necromancy SPELL = raise_dead }
	}
}

necromancy_spell_raise_dead_recipient = {
	scope = character

	is_shown = {
		var:spell_selected = flag:raise_dead
	}

	effect = {
		spell_castee_effect = { SPELL = raise_dead }
	}
}