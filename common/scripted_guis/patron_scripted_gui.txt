patron_clear = {
    scope = character

    effect = {
        if = {
            limit = { has_variable = patron_interaction_tab_toggle }
            set_variable = patron_interaction_tab_toggle_res
        }
        if = {
            limit = { has_variable = patron_shown }
            set_variable = { name = patron_shown_res value = var:patron_shown }
        }
        # if = {
        #     limit = { has_variable =  }
        #     set_variable = _res
        # }
        patron_clear_variables = yes
    }
}

patron_restore = {
    scope = character

    effect = {
        if = {
            limit = { has_variable = patron_interaction_tab_toggle_res }
            set_variable = patron_interaction_tab_toggle
        }
        if = {
            limit = { has_variable = patron_shown_res }
            set_variable = { name = patron_shown value = var:patron_shown_res }
        }
        patron_clear_res_variables = yes
    }
}

patron_selection_tab_toggle = { #interaction (passive) -> selection
    scope = character

    is_shown = {
        NOR = {
            has_variable = patron_interaction_tab_toggle
        }
    }

    effect = {
        remove_variable = patron_interaction_tab_toggle
    }
}
patron_interaction_tab_toggle = { #selection -> interaction
    scope = character

    is_shown = {
        has_variable = patron_interaction_tab_toggle
    }

    is_valid = {
        has_active_patron_selected = yes
    }

    effect = {
        set_variable = patron_interaction_tab_toggle
        patron_ardor_update_display = yes
    }
}

patron_has_no_patrons = {
    scope = character

    is_shown = {
        faith = { patron_has_patron = no }
    }
}

patron_has_princes = {
    scope = character

    is_shown = {
        faith = { patron_has_princes = yes } #testing
    }
}

patron_has_tribunal = {
    scope = character

    is_shown = {
        faith = { patron_has_tribunal = yes }
    }
}

# patron_confirm_patron = {
#     scope = character

#     is_shown = {
#         has_passive_patron_selected = yes
#     }

#     is_valid = {
#         custom_description = {
#             text = "confirm_recent_select"
#             NOT = { has_character_flag = recent_patron_selected }
#         }
#         # custom_description = {
#         # 	text = confirm_tt
#         # 	has_character_flag = recent_patron_selected
#         # }
#         #NOT = { has_character_flag = recent_patron_selected }
#     }

#     effect = {
#         custom_description = {
#             text = "confirm_tt"
#             patron_clear_traits = yes
#             patron_assign_trait = yes
#         }
#     }

# }

# Active Patrons #
# Daedra #
patron_azura_shown = {
    scope = character

    is_shown = {
        faith = { patron_azura_valid = yes }
        #always = yes #for testing
    }

    effect = {
        patron_clear_variables = yes
        set_variable = { name = patron_shown value = flag:azura }
    }
}

patron_boethiah_shown = {
    scope = character

    is_shown = {
        faith = { patron_boethiah_valid = yes }
        #always = yes #for testing
    }

    effect = {
        patron_clear_variables = yes
        set_variable = { name = patron_shown value = flag:boethiah }
    }
}

patron_clavicus_shown = {
    scope = character

    is_shown = {
        faith = { patron_clavicus_valid = yes }
        #always = yes #for testing
    }

    effect = {
        patron_clear_variables = yes
        set_variable = { name = patron_shown value = flag:clavicus }
    }
}

patron_hermaeus_shown = {
    scope = character

    is_shown = {
        faith = { patron_hermaeus_valid = yes }
        #always = yes #for testing
    }

    effect = {
        patron_clear_variables = yes
        set_variable = { name = patron_shown value = flag:hermaeus }
    }
}

patron_hircine_shown = {
    scope = character

    is_shown = {
        faith = { patron_hircine_valid = yes }
        #always = yes #for testing
    }

    effect = {
        patron_clear_variables = yes
        set_variable = { name = patron_shown value = flag:hircine }
    }
}

patron_jyggalag_shown = {
    scope = character

    is_shown = {
        faith = { patron_jyggalag_valid = yes }
        #always = yes #for testing
    }

    effect = {
        patron_clear_variables = yes
        set_variable = { name = patron_shown value = flag:jyggalag }
    }
}

patron_malacath_shown = {
    scope = character

    is_shown = {
        faith = { patron_malacath_valid = yes }
        #always = yes #for testing
    }

    effect = {
        patron_clear_variables = yes
        set_variable = { name = patron_shown value = flag:malacath }
    }
}

patron_mehrunes_shown = {
    scope = character

    is_shown = {
        faith = { patron_mehrunes_valid = yes }
        #always = yes #for testing
    }

    effect = {
        patron_clear_variables = yes
        set_variable = { name = patron_shown value = flag:mehrunes }
    }
}

patron_mephala_shown = {
    scope = character

    is_shown = {
        faith = { patron_mephala_valid = yes }
        #always = yes #for testing
    }

    effect = {
        patron_clear_variables = yes
        set_variable = { name = patron_shown value = flag:mephala }
    }
}

patron_meridia_shown = {
    scope = character

    is_shown = {
        faith = { patron_meridia_valid = yes }
        #always = yes #for testing
    }

    effect = {
        patron_clear_variables = yes
        set_variable = { name = patron_shown value = flag:meridia }
    }
}

patron_molag_shown = {
    scope = character

    is_shown = {
        faith = { patron_molag_valid = yes }
        #always = yes #for testing
    }

    effect = {
        patron_clear_variables = yes
        set_variable = { name = patron_shown value = flag:molag }
    }
}

patron_namira_shown = {
    scope = character

    is_shown = {
        faith = { patron_namira_valid = yes }
        #always = yes #for testing
    }

    effect = {
        patron_clear_variables = yes
        set_variable = { name = patron_shown value = flag:namira }
    }
}

patron_nocturnal_shown = {
    scope = character

    is_shown = {
        faith = { patron_nocturnal_valid = yes }
        #always = yes #for testing
    }

    effect = {
        patron_clear_variables = yes
        set_variable = { name = patron_shown value = flag:nocturnal }
    }
}

patron_peryite_shown = {
    scope = character

    is_shown = {
        faith = { patron_peryite_valid = yes }
        #always = yes #for testing
    }

    effect = {
        patron_clear_variables = yes
        set_variable = { name = patron_shown value = flag:peryite }
    }
}

patron_sanguine_shown = {
    scope = character

    is_shown = {
        faith = { patron_sanguine_valid = yes }
        #always = yes #for testing
    }

    effect = {
        patron_clear_variables = yes
        set_variable = { name = patron_shown value = flag:sanguine }
    }
}

patron_sheogorath_shown = {
    scope = character

    is_shown = {
        faith = { patron_sheogorath_valid = yes }
        #always = yes #for testing
    }

    effect = {
        patron_clear_variables = yes
        set_variable = { name = patron_shown value = flag:sheogorath }
    }
}

patron_vaermina_shown = {
    scope = character

    is_shown = {
        faith = { patron_vaermina_valid = yes }
        #always = yes #for testing
    }

    effect = {
        patron_clear_variables = yes
        set_variable = { name = patron_shown value = flag:vaermina }
    }
}

# Patrons done #
faith_get_patrons = {
    scope = faith

    saved_scopes = {
        player_s
    }

    effect = {
        scope:player_s = {
            clear_variable_list = faith_patrons
            set_variable = { name = faith_window value = PREV }
        }
        patron_get_list = yes
    }
}

faith_clear_patrons = {
    scope = character

    effect = {
        clear_variable_list = faith_patrons
        remove_variable = faith_window
    }
}

action_patron_clear = {
    scope = character

    effect = { remove_variable = action_patron }
}

# Since Blackninja might remove concatenation, may need to pass flags to sgui, then pass those (through provinces as saved scopes?)
# to custom_description_no_bullet and concatenate there, then call sgui.EffectTooltip
# could also use a loc string :0 "[thing]_[thing2]" and call it
# Localize is apparently going to be fixed to work properly

culture_group_cultures = {
    scope = culture_group

    effect = {
        every_in_global_list = { #TODO replace w/ every/ordered_culture_global when 1.3.x
            variable = culture_list
            limit = { ROOT = THIS.culture_group }
            custom_tooltip = "[THIS.Culture.GetName]"
        }
    }
}