namespace = ek_race

scripted_trigger ek_race_compatable_trigger = {
	trigger_if = {
		limit = {
			scope:mother = {
				has_trait = race_khajiit
			}
		}
		scope:real_father = { has_trait = race_khajiit }
	}
	trigger_if = {
		limit = {
			scope:real_father = {
				has_trait = race_khajiit
			}
		}
		scope:mother = { has_trait = race_khajiit }
	}
	trigger_if = {
		limit = {
			scope:mother = {
				has_trait = race_argonian
			}
		}
		scope:real_father = { has_trait = race_argonian }
	}
	trigger_if = {
		limit = {
			scope:real_father = {
				has_trait = race_argonian
			}
		}
		scope:mother = { has_trait = race_argonian }
	}
	trigger_if = {
		limit = {
			scope:mother = {
				NOT = { has_trait = race_khajiit }
				NOT = { has_trait = race_argonian }
			}
			scope:real_father = {
				NOT = { has_trait = race_khajiit }
				NOT = { has_trait = race_argonian }
			}
		}
		always = yes
	}
}

#Ends Pregnancy between two incompatible species
ek_race.0001 = {
	type = character_event
	hidden = yes

	trigger = {
		ek_race_compatable_trigger = no
	}

	immediate = {
		random_dummy_gender_effect = yes
		end_pregnancy = yes
		pregnancy_cleanup_effect = yes
	}
}

#Delays initial assignment by two days so all family relations are set up first
ek_race.0002 = {
	type = empty
	hidden = yes

	immediate = {
		every_ruler = {
			trigger_event = { id = ek_race.0003 days = 2 }
			every_courtier_or_guest = {
				trigger_event = { id = ek_race.0003 days = 2 }
			}
		}
	}
}

#Directs characters to the setup effect
ek_race.0003 = {
	type = character_event
	hidden = yes

	immediate = {
		#First checks for potential inheritances
		lifespan_traits_inheritance_effect = yes
		race_traits_inheritance_effect = yes
		
		#Then goes for the generic event
		ek_character_setup_effect = yes
	}
}

#Directs newborns directly to the race & lifespan inheritance effect
ek_race.0004 = {
	type = character_event
	hidden = yes

	immediate = {
		race_traits_inheritance_effect = yes
		lifespan_traits_inheritance_effect = yes
	}
}